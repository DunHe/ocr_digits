#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Create on 2016-01-19 15:37:14

@author: huangzhenghua
'''
import os
import json
import cv2
import numpy as np
import argparse
from argparse import RawTextHelpFormatter
from sklearn.externals import joblib
from ocr_digits.common.traverse import traverseFolders
from ocr_digits.reco_digits.recoDigits import cropDigits
from ocr_digits.ml.classifier import accuracy_score


description='''
    ./eval_invoice_groups --invoice ../../ocr_datasets/training_dir_groups/group10/0609145140i7gzW.jpg --classifier_path ../../ocr_trained_model/trained_model/trained_model.pkl
    ./eval_invoice_groups --invoice_group ../../ocr_datasets/training_dir_groups --classifier_path ../../ocr_trained_model/trained_model/trained_model.pkl
'''


def jsonLoad(file_path, feature, subfeature=''):
    file = open(file_path)
    jsons = json.loads(file.read())
    file.close()

    if subfeature != '':    
        return jsons[feature][subfeature]
    else:
        return jsons[feature]


class Invoice:

    def __init__(self):
        self.daima_data = np.array([], dtype=np.uint8)
        self.daima_target = np.array([], dtype=np.uint8)
        self.haoma_data = np.array([], dtype=np.uint8)
        self.haoma_target = np.array([], dtype=np.uint8)
        

    def invoice_process(self, dir):

        img = cv2.imread(dir, 0)

        daima = jsonLoad(dir+'.desc.json',
                         'fapiaodaima', 'bounding_box')
        daima_x = float(daima['top_left'][0])
        daima_y = float(daima['top_left'][1])
        daima_w = float(daima['low_right'][0]) - daima_x
        daima_h = float(daima['low_right'][1]) - daima_y
        daima_text = jsonLoad(dir+'.desc.json',
                'fapiaodaima', 'text').encode('utf-8')

        if len(daima_text) == 12:
            digits = cropDigits(
                    img,
                    int(daima_x), int(daima_y),
                    int(daima_h), int(daima_w),
                    12)
            for i in range(12):
                if len(self.daima_data) == 0:
                    self.daima_data = digits[i]
                else:
                    self.daima_data = np.vstack((self.daima_data, digits[i]))
                self.daima_target = np.hstack((self.daima_target, daima_text[i]))
        
        haoma = jsonLoad(dir+'.desc.json', 'fapiaohaoma', 'bounding_box')
        haoma_x = float(haoma['top_left'][0])
        haoma_y = float(haoma['top_left'][1])
        haoma_w = float(haoma['low_right'][0]) - haoma_x
        haoma_h = float(haoma['low_right'][1]) - haoma_y
        haoma_text = jsonLoad(dir+'.desc.json',
                'fapiaohaoma', 'text').encode('utf-8')

        if len(haoma_text) == 8:
            digits = cropDigits(
                    img,
                    int(haoma_x), int(haoma_y),
                    int(haoma_h), int(haoma_w),
                    8)
            for i in range(8):
                if len(self.haoma_data) == 0:
                    self.haoma_data = digits[i]
                else:
                    self.haoma_data = np.vstack((self.haoma_data, digits[i]))
                self.haoma_target = np.hstack((self.haoma_target, haoma_text[i]))


    def invoice_predict(self, clf_path):
        clf = joblib.load(clf_path)
        if len(daima_data) != 0 and len(daima_target) != 0 \
           and len(haoma_data) != 0 and len(haoma_target) != 0:

            print accuracy_score(self.daima_target,
                                 clf.predict(self.daima_data))
            print accuracy_score(self.haoma_target,
                                 clf.predict(self.haoma_data))


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=RawTextHelpFormatter)

    parser.add_argument('--invoice', dest='invoice',
                        default=None, required=False,
                        help='invoice to reco')
    
    parser.add_argument('--invoice_group', dest='invoice_group',
                        default=None, required=False,
                        help='invoice group to reco')

    parser.add_argument('--classifier_path', dest='clf',
                        default=None, required=False,
                        help='classifier path')
    
    options = parser.parse_args()

    test = Invoice()

    if options.invoice:
        invoice = os.path.expanduser(options.invoice)
        test.invoice_process(invoice)
    if options.invoice_group:
        invoice_group = os.path.expanduser(options.invoice_group)
        traverseFolders(
            test.invoice_process,
            invoice_group, ftype='image')
    if options.clf:
        clf_path = os.path.expanduser(options.clf)
        test.invoice_predict(clf_path)
