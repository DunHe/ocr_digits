#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Create on 2016-01-19 15:37:14

@author: huangzhenghua
'''

import os
import json
import cv2
import shutil
import argparse
import numpy as np
from argparse import RawTextHelpFormatter
from sklearn.externals import joblib
from ocr_digits.common.base import Base
from ocr_digits.imgcrop.crop import cropDigits
from ocr_digits.ml.accuracy import accuracy_score

description='''
    ./eval_invoice_groups --invoice ../../ocr_datasets/training_dir_groups/group10/0609145140i7gzW.jpg --classifier_path ../../ocr_trained_model/trained_model_svm/trained_model_svm.pkl
    ./eval_invoice_groups --invoice_group ../../ocr_datasets/training_dir_groups --classifier_path ../../ocr_trained_model/trained_model_svm/trained_model_svm.pkl
'''


class Invoice(Base):


    def process(self, dir):
        if self.is_debug:
            if not os.path.isdir(self.debug_dir):
                os.makedirs(self.debug_dir)

        img = cv2.imread(dir, 0)

        daima = self.jsonLoad(dir+'.desc.json',
                         'fapiaodaima', 'bounding_box')
        daima_x = int(float(daima['top_left'][0]))
        daima_y = int(float(daima['top_left'][1]))
        daima_w = int(float(daima['low_right'][0])) - daima_x
        daima_h = int(float(daima['low_right'][1])) - daima_y
        daima_text = self.jsonLoad(dir+'.desc.json',
                'fapiaodaima', 'text').encode('utf-8')

        daima_len = 12
        if len(daima_text) == daima_len:
            digits, binImg = cropDigits(
                    img,
                    int(daima_x), int(daima_y),
                    int(daima_h), int(daima_w),
                    daima_len,
                    self.digit_w, self.digit_h)
            for i in range(daima_len):
                if len(self.daima_data) == 0:
                    self.daima_data = digits[i]
                else:
                    self.daima_data = np.vstack((self.daima_data, digits[i]))
                self.daima_target = np.hstack((self.daima_target,
                                               daima_text[i]))
            if self.is_debug:
                self.show_field(img,
                                binImg,
                                dir,
                                digits=digits,
                                field_name="daima",
                                field_x=int(daima_x), field_y=int(daima_y),
                                field_w=int(daima_w), field_h=int(daima_h),)
                
        else:
            raise ValueError("Please correct %s. "
                "Daima len is not equal to %d " % (dir, daima_len))

        haoma = self.jsonLoad(dir+'.desc.json', 'fapiaohaoma', 'bounding_box')
        haoma_x = int(float(haoma['top_left'][0]))
        haoma_y = int(float(haoma['top_left'][1]))
        haoma_w = int(float(haoma['low_right'][0])) - haoma_x
        haoma_h = int(float(haoma['low_right'][1])) - haoma_y
        haoma_text = self.jsonLoad(dir+'.desc.json',
                'fapiaohaoma', 'text').encode('utf-8')

        haoma_len = 8
        if len(haoma_text) == haoma_len:
            digits, binImg = cropDigits(
                    img,
                    int(haoma_x), int(haoma_y),
                    int(haoma_h), int(haoma_w),
                    haoma_len)
            for i in range(haoma_len):
                if len(self.haoma_data) == 0:
                    self.haoma_data = digits[i]
                else:
                    self.haoma_data = np.vstack((self.haoma_data, digits[i]))
                self.haoma_target = np.hstack((self.haoma_target, haoma_text[i]))
            if self.is_debug:
                self.show_field(img,
                                binImg,
                                dir,
                                digits=digits,
                                field_name="haoma",
                                field_x=int(haoma_x), field_y=int(haoma_y),
                                field_w=int(haoma_w), field_h=int(haoma_h))
        else:
            raise ValueError("Please correct %s. "
                "haoma len is not equal to %d " % (dir, haoma_len))

    def predict(self, clf_path):
        clf = joblib.load(clf_path)
        if len(self.daima_data) != 0 and len(self.daima_target) != 0 \
           and len(self.haoma_data) != 0 and len(self.haoma_target) != 0:

            print accuracy_score(self.daima_target,
                                 clf.predict(self.daima_data))
            print accuracy_score(self.haoma_target,
                                 clf.predict(self.haoma_data))


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=RawTextHelpFormatter)

    parser.add_argument('--invoice', dest='invoice',
                        default=None, required=False,
                        help='invoice to reco')
    
    parser.add_argument('--invoice_group', dest='invoice_group',
                        default=None, required=False,
                        help='invoice group to reco')

    parser.add_argument('--classifier_path', dest='clf',
                        default=None, required=False,
                        help='classifier path')
    
    options = parser.parse_args()

    test = Invoice(debug_dir='/tmp/invoice_debug/')

    if options.invoice:
        invoice = os.path.expanduser(options.invoice)
        test.process(invoice)
    if options.invoice_group:
        invoice_group = os.path.expanduser(options.invoice_group)
        test.traverseFolders(
            test.process,
            invoice_group, ftype='image')
    if options.clf:
        clf_path = os.path.expanduser(options.clf)
        test.predict(clf_path)
